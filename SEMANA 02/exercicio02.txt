A) Os quatro processos de compilação são pré-processamento, compilação, assembly e linking.

Pré-processamento

A primeira etapa da compilação é chamada de pré-processamento. Neste estágio, as linhas que começam com o caractere # são interpretadas pelo pré-processador como comandos do pré-processador. Esses comandos formam uma linguagem de macro simples com sua própria sintaxe e semântica. Essa linguagem é usada para reduzir a repetição no código-fonte, fornecendo funcionalidade para arquivos embutidos, definir macros e omitir código condicionalmente.

Compilação 

A segunda etapa da compilação é bastante confusamente chamada de compilação. Neste estágio, o código pré-processado é traduzido em instruções de montagem específicas para a arquitetura do processador de destino. Estes formam uma linguagem intermediária legível por humanos.

Assembly

Durante este estágio, um montador é usado para traduzir as instruções de montagem em código objeto. A saída consiste em instruções reais a serem executadas pelo processador de destino.

Linking

O código objeto gerado na etapa de montagem é composto por instruções de máquina que o processador entende, mas algumas partes do programa estão fora de ordem ou faltando. Para produzir um programa executável, as partes existentes precisam ser reorganizadas e as que faltam preenchidas. Esse processo é chamado de vinculação.

O vinculador organizará as partes do código do objeto para que as funções em algumas partes possam chamar com sucesso funções em outras. Ele também adicionará peças contendo as instruções para as funções da biblioteca usadas pelo programa.

b)O compilador gcc  permite  fornecer  parâmetros  extras,  que modificamdesde  a  emissão  de erros atéo binário final, o otimizando para determinados comportamentos. Explique a função dos seguintes parâmetros:

i) -static
Por padrão, o gcc usa bibliotecas compartilhadas, portanto, se você precisar vincular bibliotecas estáticas, terá
para usar a opção -static.


ii) -g 

A opção -g pode ser qualificada com 1, 2 ou 3 para especificar quanta informação de depuração incluir.

iii) -pedantic

-pedantic diz ao gcc para emitir todos os avisos exigidos pelo estrito padrão ANSI/ISO C.

iv) -Wall

Emite todos os avisos geralmente úteis que o gcc pode fornecer.
Avisos específicos também podem ser sinalizados usando -W{warning}.

v) -Os

Aponta o nome do arquivo de saída.


vi) -O3


A implementação é altamente
específico do processador. As opções -O3 incluem todas as otimizações de O2, desenrolamento de loop e outras
recursos específicos do processador.